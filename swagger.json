{
  "openapi": "3.0.0",
  "info": {
    "description": "\nWelcome! This page describes a simple REST API for a chat backend.\n",
    "title": "Chat BackEnd App",
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/check": {
      "post": {
        "description": "Check the health of the system.\n",
        "operationId": "Health Check",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "health": {
                      "enum": ["ok"],
                      "type": "string"
                    }
                  },
                  "required": ["health"]
                }
              }
            },
            "description": "Success"
          }
        }
      }
    },
    "/users": {
      "post": {
        "description": "Create a user in the system.\n",
        "operationId": "Create a new User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "format": "password",
                    "type": "string"
                  }
                },
                "required": ["password", "username"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "User ID of the newly created user.\n",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": ["id"]
                }
              }
            },
            "description": "Success"
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Log in as an existing user.\n",
        "operationId": "Login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "format": "password",
                    "type": "string"
                  }
                },
                "required": ["password", "username"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "User ID of the user who logged in.\n",
                      "format": "int64",
                      "type": "integer"
                    },
                    "token": {
                      "description": "Authentication token to use for API calls on behalf of\nthis user.\n",
                      "type": "string"
                    }
                  },
                  "required": ["id", "token"]
                }
              }
            },
            "description": "Success"
          }
        }
      }
    },
    "/messages": {
      "get": {
        "description": "Fetch all existing messages to a given recipient, within a range of\nmessage IDs.\n",
        "operationId": "Get Messages",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "recipient",
            "required": true,
            "schema": {
              "description": "User ID of recipient.\n",
              "format": "int64",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "description": "Starting message ID. Messages will be returned in increasing\norder of message ID, starting from this value (or the next lowest\nvalue stored in the database).\n",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "description": "Limit the response to this many messages.\n",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "messages": {
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      },
                      "type": "array"
                    }
                  },
                  "required": ["messages"]
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "description": "Send a message from one user to another. We support three types of\nmessages `text`, `image` and `video` (the latter two types include\nmetadata, please note the metadata will vary according the message\ntype, click on \"content\" on the example below for more details).\n",
        "operationId": "Send a Message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "sender": {
                    "description": "User ID of sender.\n",
                    "format": "int64",
                    "type": "integer"
                  },
                  "recipient": {
                    "description": "User ID of recipient.\n",
                    "format": "int64",
                    "type": "integer"
                  },
                  "content": {
                    "$ref": "#/components/schemas/Content"
                  }
                },
                "required": ["content", "recipient", "sender"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "Message IDs are required to be unique and increase over\ntime; they may or may not be sequential.\n",
                      "format": "int64",
                      "type": "integer"
                    },
                    "timestamp": {
                      "description": "Timestamp for this message, as recorded on the server.\n",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": ["id", "timestamp"]
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Message": {
        "properties": {
          "id": {
            "description": "Message IDs are required to be unique and increase over time; they\nmay or may not be sequential.\n",
            "format": "int64",
            "type": "integer"
          },
          "timestamp": {
            "description": "UTC Timestamp at which server received this message.\n",
            "format": "date-time",
            "type": "string"
          },
          "sender": {
            "description": "User ID of message sender.\n",
            "format": "int64",
            "type": "integer"
          },
          "recipient": {
            "description": "User ID of message recipient.\n",
            "format": "int64",
            "type": "integer"
          },
          "content": {
            "$ref": "#/components/schemas/Content"
          }
        },
        "required": ["content", "id", "recipient", "sender", "timestamp"]
      },
      "Content": {
        "description": "Message content (one of three possible types).\n",
        "discriminator": {
          "mapping": {
            "text": "#/components/schemas/Text",
            "image": "#/components/schemas/Image",
            "video": "#/components/schemas/Video"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Text"
          },
          {
            "$ref": "#/components/schemas/Image"
          },
          {
            "$ref": "#/components/schemas/Video"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "Text": {
        "properties": {
          "type": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": ["text", "type"]
      },
      "Image": {
        "properties": {
          "type": {
            "type": "string"
          },
          "url": {
            "format": "uri",
            "type": "string"
          },
          "height": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          }
        },
        "required": ["height", "type", "url", "width"]
      },
      "Video": {
        "properties": {
          "type": {
            "type": "string"
          },
          "url": {
            "format": "uri",
            "type": "string"
          },
          "source": {
            "enum": ["youtube", "vimeo"],
            "type": "string"
          }
        },
        "required": ["source", "type", "url"]
      }
    },
    "securitySchemes": {
      "token": {
        "description": "Obtain a token from the login endpoint, then pass it into the other\nendpoints as an `Authorization` header.\n",
        "in": "header",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}
